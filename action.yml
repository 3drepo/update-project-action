name: Update project
description: Updates an item's fields on a GitHub Projects (beta) board based on a workflow dispatch (or other) event's input.
inputs:
  organization:
    description: The organization that contains the project, defaults to the current repository owner
    required: false
    default: ${{ github.repository_owner }}
  project_number:
    description: The project number from the project's URL
    required: true
  content_id:
    description: The global ID of the issue or pull request within the project
    required: true
  field:
    description: The field on the project to set the value of
    required: true
  value:
    description: The value to set the project field to
    required: true
  github_token:
    description: A GitHub Token with access to both the source issue and the destination project (`repo` and `write:org` scopes)
    required: true
outputs:
  project_id:
    description: "The global ID of the project"
    value: ${{ steps.parse_project_metadata.outputs.project_id }}
  item_id:
    description: "The global ID of the issue or pull request"
    value: ${{ steps.parse_project_metadata.outputs.item_id }}
  item_title:
    description: "The title of the issue or pull request"
    value: ${{ steps.parse_project_metadata.outputs.item_title }}
  field_id:
    description: "The global ID of the field"
    value: ${{ steps.parse_project_metadata.outputs.field_id }}
  field_is_select:
    description: "Whether or not the field is a select field vs. free-form input"
    value: ${{ steps.parse_project_metadata.outputs.field_is_select }}
  option_id:
    description: "The global ID of the selected option"
    value: ${{ steps.parse_project_metadata.outputs.option_id }}
runs:
  using: "composite"
  steps:
    - name: Fetch project metadata
      id: fetch_project_metadata
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PROJECT_NUMBER: ${{ inputs.project_number }}
        ORGANIZATION: ${{ inputs.organization }}
        FIELD: ${{ inputs.field }}
        CONTENT_ID: ${{ inputs.content_id }}
        VALUE: ${{ inputs.value }}
        FILE_NAME: project-${{ inputs.organization }}-${{ inputs.project_number }}.json
        QUERY: |
          query ($organization: String!, $project_number: Int!) {
            organization(login: $organization) {
              projectV2(number: $project_number) {
                id
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                        title
                      }
                    }
                  }
                }
                fields(first: 25) {
                  nodes {
                    ... on ProjectV2FieldCommon {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }
      shell: bash
      run: |
        # Fetch project metadata
        if [ ! -f "$FILE_NAME" ]; then
          gh api graphql -f query="$QUERY" -F project_number=$PROJECT_NUMBER -F organization=$ORGANIZATION > "$FILE_NAME"
        else
          echo "Using cached project metadata from '$FILE_NAME'"
        fi

        echo "::set-output name=file_name::$FILE_NAME"

    - name: Parse project metadata
      id: parse_project_metadata
      shell: bash
      env:
        CONTENT_ID: ${{ inputs.content_id }}
        FIELD: ${{ inputs.field }}
        VALUE: ${{ inputs.value }}
        FILE_NAME: ${{ steps.fetch_project_metadata.outputs.file_name }}
      run: |
          # Parse project metadata
          echo '::set-output name=project_id::'$(jq -r '.data.organization.projectV2.id' "$FILE_NAME")
          echo '::set-output name=item_id::'$(jq -r '.data.organization.projectV2.items.nodes[] | select(.content.id==$CONTENT_ID) | .id' "$FILE_NAME" --arg CONTENT_ID "$CONTENT_ID")
          echo '::set-output name=item_title::'$(jq -r '.data.organization.projectV2.items.nodes[] | select(.content.id==$CONTENT_ID) | .content.title' "$FILE_NAME" --arg CONTENT_ID "$CONTENT_ID")
          echo '::set-output name=field_id::'$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name==$FIELD) | .id' "$FILE_NAME" --arg FIELD "$FIELD")
          echo '::set-output name=field_is_select::'$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name==$FIELD) | has("options")' "$FILE_NAME" --arg FIELD "$FIELD")
          echo '::set-output name=option_id::'$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name==$FIELD) | .options[]? | select(.name | contains($VALUE)) | .id' "$FILE_NAME" --arg VALUE "$VALUE" --arg FIELD "$FIELD")

    - name: Ensure project, item, field, and option were found
      env:
        PROJECT_NUMBER: ${{ inputs.project_number }}
        ORGANIZATION: ${{ inputs.organization }}
        FIELD: ${{ inputs.field }}
        CONTENT_ID: ${{ inputs.content_id }}
        VALUE: ${{ inputs.value }}
        PROJECT_ID: ${{ steps.parse_project_metadata.outputs.project_id }}
        ITEM_ID: ${{ steps.parse_project_metadata.outputs.item_id }}
        FIELD_ID: ${{ steps.parse_project_metadata.outputs.field_id }}
        FIELD_IS_SELECT: ${{ steps.parse_project_metadata.outputs.field_is_select }}
        OPTION_ID: ${{ steps.parse_project_metadata.outputs.option_id }}
      shell: bash
      run: |
        # Ensure project, item, field, and option were found
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then echo "Project '$PROJECT_NUMBER' not found for organization '$ORGANIZATION'"; exit 1; fi
        if [ -z "$ITEM_ID" ]; then echo "Item not found with ID '$CONTENT_ID'"; exit 1; fi
        if [ -z "$FIELD_ID" ]; then echo "Field '$FIELD' not found"; exit 1; fi
        if [[ "$FIELD_IS_SELECT" = "true" && -z "$OPTION_ID" ]]; then echo "Option not found with value '$VALUE'"; exit 1; fi
    
    - name: Parse field type
      shell: bash
      id: parse_field_type
      env:
        FIELD_IS_SELECT: ${{ steps.parse_project_metadata.outputs.field_is_select }}
        OPTION_ID: ${{ steps.parse_project_metadata.outputs.option_id }}
        VALUE: ${{ inputs.value }}
      run: |
        # Parse field type
        if [ "$FIELD_IS_SELECT" = "true" ]; then
          echo "::set-output name=value_to_set::$OPTION_ID"
          echo '::set-output name=field_type::singleSelectOptionId'
        else
          echo "::set-output name=value_to_set::$VALUE"
          echo '::set-output name=field_type::text'
        fi

    - name: Update field
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        FIELD: ${{ inputs.field }}
        PROJECT_ID: ${{ steps.parse_project_metadata.outputs.project_id }}
        ITEM_ID: ${{ steps.parse_project_metadata.outputs.item_id }}
        FIELD_ID: ${{ steps.parse_project_metadata.outputs.field_id }}
        ITEM_TITLE: ${{ steps.parse_project_metadata.outputs.item_title }}
        VALUE_TO_SET: ${{ steps.parse_field_type.outputs.value_to_set }}
        QUERY: |
          mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
            updateProjectV2ItemFieldValue(
              input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: {
                  ${{ steps.parse_field_type.outputs.field_type }}: $value
                }
              }
            ) {
              projectV2Item {
                id
              }
            }
          }

      shell: bash
      run: |
        # Update project
        gh api graphql -f query="$QUERY" -F project=$PROJECT_ID -F item=$ITEM_ID -F field=$FIELD_ID -F value="$VALUE_TO_SET"

        echo ""
        echo "Updated field '$FIELD' on '$ITEM_TITLE' to '$VALUE'. Happy reporting! ðŸ“ˆ"
