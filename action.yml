name: Update project
description: Updates an item on a GitHub Projects (beta) board based on a workflow dispatch event's input
inputs:
  organization: 
    description: The organization that contains the project
    required: true
  project_number:
    description: The project number from the project's URL
    required: true
  content_id:
    description: The global ID of the issue or pull request within the project
    required: true
  field: 
    description: The field on the project to set the value of
    required: true
  value:
    description: The value to set the project field to
    required: true
  github_token:
    description: A GitHub Token with access to both the source issue and the destination project
    required: true
runs: 
  using: "composite"
  steps:
    - name: Get project metadata
      env: 
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PROJECT_NUMBER: ${{ inputs.project_number }}
        ORGANIZATION: ${{ inputs.organization }}
        FIELD: ${{ inputs.field }}       
        CONTENT_ID: ${{ inputs.content_id }}
        VALUE: ${{ inputs.value }}
      shell: bash
      run: |
        gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          query($organization: String!, $project_number: Int!) {
            organization(login: $organization) {
              projectNext(number: $project_number) {
                id
                items(first: 50) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                        title
                      }
                    }
                  }
                }
                fields(first: 10) {
                  nodes {
                    id
                    name
                    settings
                  }
                }
              }
            }
          }' -F project_number=$PROJECT_NUMBER -f organization=$ORGANIZATION > project.json

          echo 'PROJECT_ID='$(jq -r '.data.organization.projectNext.id' project.json) >> $GITHUB_ENV
          echo 'ITEM_ID='$(jq -r '.data.organization.projectNext.items.nodes[] | select(.content.id==$CONTENT_ID) | .id' project.json --arg CONTENT_ID "$CONTENT_ID") >> $GITHUB_ENV
          echo 'FIELD_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name==$FIELD) | .id' project.json --arg FIELD "$FIELD") >> $GITHUB_ENV
          echo 'OPTION_ID='$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name==$FIELD) | .settings | fromjson | .options[] | select(.name | contains($VALUE)) | .id' project.json --arg VALUE "$VALUE" --arg FIELD "$FIELD") >> $GITHUB_ENV

    - name: Ensure project, item, field, and option were found
      shell: bash
      run: |
        if [ -z "$PROJECT_ID" ]; then echo "Project not found"; exit 1; fi  
        if [ -z "$ITEM_ID" ]; then echo "Item not found"; exit 1; fi  
        if [ -z "$FIELD_ID" ]; then echo "Field not found"; exit 1; fi  
        if [ -z "$OPTION_ID" ]; then echo "Option not found"; exit 1; fi  

    - name: Update field
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash
      run: |
        gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          mutation($project: ID!, $item: ID!, $field: ID!, $option: ID!) {
            updateProjectNextItemField(
              input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: $option
              }
            ) {
              projectNextItem {
                id
              }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f field=$FIELD_ID -f option=$OPTION_ID
