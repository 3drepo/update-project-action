name: Update project
description: Updates an item on a GitHub Projects (beta) board based on a workflow dispatch event's input
inputs:
  organization: 
    description: The organization that contains the project, defaults to the current repository owner
    required: false
    default: ${{ github.repository_owner }}
  project_number:
    description: The project number from the project's URL
    required: true
  content_id:
    description: The global ID of the issue or pull request within the project
    required: true
  field: 
    description: The field on the project to set the value of
    required: true
  value:
    description: The value to set the project field to
    required: true
  github_token:
    description: A GitHub Token with access to both the source issue and the destination project
    required: true
runs: 
  using: "composite"
  steps:
    - name: Get project metadata
      id: get_project_metadata
      env: 
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PROJECT_NUMBER: ${{ inputs.project_number }}
        ORGANIZATION: ${{ inputs.organization }}
        FIELD: ${{ inputs.field }}       
        CONTENT_ID: ${{ inputs.content_id }}
        VALUE: ${{ inputs.value }}
      shell: bash
      run: |
        gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          query($organization: String!, $project_number: Int!) {
            organization(login: $organization) {
              projectNext(number: $project_number) {
                id
                items(first: 50) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                        title
                      }
                    }
                  }
                }
                fields(first: 10) {
                  nodes {
                    id
                    name
                    settings
                  }
                }
              }
            }
          }' -F project_number=$PROJECT_NUMBER -f organization=$ORGANIZATION > project.json

          echo '::set-output name=project_id::'$(jq -r '.data.organization.projectNext.id' project.json)
          echo '::set-output name=item_id::'$(jq -r '.data.organization.projectNext.items.nodes[] | select(.content.id==$CONTENT_ID) | .id' project.json --arg CONTENT_ID "$CONTENT_ID")
          echo '::set-output name=item_title::'$(jq -r '.data.organization.projectNext.items.nodes[] | select(.content.id==$CONTENT_ID) | .content.title' project.json --arg CONTENT_ID "$CONTENT_ID")
          echo '::set-output name=field_id::'$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name==$FIELD) | .id' project.json --arg FIELD "$FIELD")
          echo '::set-output name=field_is_select::'$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name==$FIELD) | .settings | fromjson | has("options")' project.json --arg FIELD "$FIELD")
          echo '::set-output name=option_id::'$(jq -r '.data.organization.projectNext.fields.nodes[] | select(.name==$FIELD) | .settings | fromjson | .options[]? | select(.name | contains($VALUE)) | .id' project.json --arg VALUE "$VALUE" --arg FIELD "$FIELD")

    - name: Ensure project, item, field, and option were found
      shell: bash
      env: 
        PROJECT_NUMBER: ${{ inputs.project_number }}
        ORGANIZATION: ${{ inputs.organization }}
        FIELD: ${{ inputs.field }}       
        CONTENT_ID: ${{ inputs.content_id }}
        VALUE: ${{ inputs.value }}
        PROJECT_ID: ${{ steps.get_project_metadata.project_id }}
        ITEM_ID: ${{ steps.get_project_metadata.item_id }}
        FIELD_ID: ${{ steps.get_project_metadata.field_id }}
        FIELD_IS_SELECT: ${{ steps.get_project_metadata.field_is_select }}
        OPTION_ID: ${{ steps.get_project_metadata.option_id }}

      run: |
        if [ -z "$PROJECT_ID" ]; then echo "Project '$PROJECT_NUMBER' not found for organization '$ORGANIZATION'"; exit 1; fi  
        if [ -z "$ITEM_ID" ]; then echo "Item not found with ID '$CONTENT_ID'"; exit 1; fi  
        if [ -z "$FIELD_ID" ]; then echo "Field '$FIELD' not found"; exit 1; fi  
        if [[ "$FIELD_IS_SELECT" = "true" && -z "$OPTION_ID" ]]; then echo "Option not found with value '$VALUE'"; exit 1; fi  

    - name: Update field
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        FIELD: ${{ inputs.field }}       
        VALUE: ${{ inputs.value }}
        PROJECT_ID: ${{ steps.get_project_metadata.project_id }}
        ITEM_ID: ${{ steps.get_project_metadata.item_id }}
        FIELD_ID: ${{ steps.get_project_metadata.field_id }}
        FIELD_IS_SELECT: ${{ steps.get_project_metadata.field_is_select }}
        OPTION_ID: ${{ steps.get_project_metadata.option_id }}
        ITEM_TITLE: ${{ steps.get_project_metadata.item_title }}

      shell: bash
      run: |
        if [ "$FIELD_IS_SELECT" = "true" ]; then 
          export VALUE_TO_SET="$OPTION_ID"
        else
          export VALUE_TO_SET="$VALUE"
        fi

        gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          mutation($project: ID!, $item: ID!, $field: ID!, $value: ID!) {
            updateProjectNextItemField(
              input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: $value
              }
            ) {
              projectNextItem {
                id
              }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f field=$FIELD_ID -f value="$VALUE_TO_SET"

        echo ""
        echo "Updated field '$FIELD' on '$ITEM_TITLE' to '$VALUE'. Happy reporting! ðŸ“ˆ"

